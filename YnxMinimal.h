//---------------------------------------------------------------------
//
//	Program written by Channarong (Aon) Khamphusa for
//		Yannix 2018/06/25
//	Copyright Yannix (Thailand) Co., Ltd 2018. All rights reserved
//
//---------------------------------------------------------------------
#if !defined(___YnxMinimal_h)
#define ___YnxMinimal_h

//---------------------------------------------------------------------
//
//	STANDARD INCLUDES
//
//---------------------------------------------------------------------

#include <string>

//---------------------------------------------------------------------
//
//	NON-STANDARD INCLUDES
//
//---------------------------------------------------------------------


//---------------------------------------------------------------------
//
//	DEFINES
//
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//
//	INLINES
//
//---------------------------------------------------------------------

//---------------------------------------------------------------------
//
//	GLOBALS
//
//---------------------------------------------------------------------

namespace YnxMinimal
{	
	//---------------------------------------------------------------------
	//
	//	STRUCTS
	//
	//---------------------------------------------------------------------

	//---------------------------------------------------------------------
	//
	//	INLINES
	//
	//---------------------------------------------------------------------
	
	//---------------------------------------------------------------------
	//
	//	CLASSES
	//
	//---------------------------------------------------------------------
	
	class ynxValueException
	{
		//---------------------------------------------------------------------
		//	public member classes
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	public member data
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	protected member data
		//---------------------------------------------------------------------
		protected:
			
			std::string description;

		//---------------------------------------------------------------------
		//	private member data
		//---------------------------------------------------------------------
		private:

		//---------------------------------------------------------------------
		//	public contructors/destructors
		//---------------------------------------------------------------------
		public:
			ynxValueException( const char *description ) : description( description )
			{}
			ynxValueException( const std::string &description ) : description( description )
			{}

			virtual ~ynxValueException() 
			{}

		//---------------------------------------------------------------------
		//	public access functions
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	public member functions
		//---------------------------------------------------------------------
		public:
		
			//---------------------------------------------------------------------
			//	OVERLOADED from std::exception

			virtual const char *what() const throw()
				{ return description.c_str(); }

		//---------------------------------------------------------------------
		//	public operator overloads
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	protected member functions
		//---------------------------------------------------------------------
		protected:

	};
	
	
	class Vector2
	{
		//---------------------------------------------------------------------
		//	public member classes
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	public member data
		//---------------------------------------------------------------------
		public:
			double x, y;

		//---------------------------------------------------------------------
		//	protected member data
		//---------------------------------------------------------------------
		
		protected:
			

		//---------------------------------------------------------------------
		//	public contructors/destructors
		//---------------------------------------------------------------------
		public:
		
			Vector2()
			{
				this->x = 0;
				this->y = 0;
			}

			Vector2( double x, double y )
			{ 
				this->x = x;
				this->y = y;
			}

			Vector2( const Vector2 &v )
			{ 
				this->x = v.x;
				this->y = v.y;
			}
			
			~Vector2()
			{}
		
		//---------------------------------------------------------------------
		//	public member functions
		//---------------------------------------------------------------------
		public:
		
			//	compute the square of the norm
			double sqrnorm() const
			{
				return ( x*x+y*y );
			}

			void copy( const Vector2 &v )
			{
					this->x = v.x;
					this->y = v.y;
			}
			
			//	add/subtract vectors
			void add( const Vector2 &v )
			{
				this->x += v.x; 
				this->y += v.y; 
			}
			void subtract( const Vector2 &v )
			{
				this->x -= v.x; 
				this->y -= v.y;
			}
			
			//	multiply/divide a scalar
			void multiply( double d )
			{
				this->x *= d; 
				this->y *= d;
			}
			void divide( double d )
			{
				this->x /= d; 
				this->y /= d;
			}

		//---------------------------------------------------------------------
		//	public operator overloads
		//---------------------------------------------------------------------
		public:
		
			Vector2 &operator +=( const Vector2 &other )
	    	{
				this->add( other );
				return *this;
	    	}
			
			Vector2 &operator -=( const Vector2 &other )
	    	{
				this->subtract( other );
				return *this;
	    	}

			Vector2 &operator /=( double d )
	    	{
				this->divide( d );
				return *this;
	    	}		

			Vector2 operator +( const Vector2 &other ) const
			{
				Vector2 ret( *this );
				ret += other;
				return ret;
			}

			Vector2 operator -( const Vector2 &other ) const
			{
				Vector2 ret( *this );
				ret -= other;
				return ret;
			}
	
		//---------------------------------------------------------------------
		//	protected member functions
		//---------------------------------------------------------------------
		protected:	

	};
	
	//	class parabolic fit for 3 data points 
	class ParabolicFit
	{
		//---------------------------------------------------------------------
		//	public member classes
		//---------------------------------------------------------------------
		public:

		//---------------------------------------------------------------------
		//	public member data
		//---------------------------------------------------------------------
		public:
		
			//	parabolic equation:
			//	  f(x) = a*(x-h)^2 + k
			//		or
			//	  f(x) = a*x^2 + b*x + c
			double a, b, c, h, k;

		//---------------------------------------------------------------------
		//	protected member data
		//---------------------------------------------------------------------
		protected:
			

		//---------------------------------------------------------------------
		//	public contructors/destructors
		//---------------------------------------------------------------------
		public:
		
			ParabolicFit() : a(0), h(0), k(0)
			{}

			ParabolicFit( double fm1, double f0, double f1 )
			{
				this->fitUnitData( fm1, f0, f1 );
			}

			~ParabolicFit()
			{}
		
		//---------------------------------------------------------------------
		//	public member functions
		//---------------------------------------------------------------------
		public:
		
			//	do parabolic fit of three data points:
			//		f(-1), f(0), f(1) (i.e. unit separations)
			void fitUnitData( double fm1, double f0, double f1 )
			{
				//	f(x) = ax^2 + bx + c or
				//		f(x) = a (x-h)^2 + k
				this->c = f0;
				this->b = (f1-fm1)/2.f;
				this->a = (f1+fm1)/2.f - f0;

				this->computeHKFromABC();
			}
			
			//	compute this->h and this->k from this->a/b/c
			void computeHKFromABC()
			{
				this->h = -this->b / ( 2 * this->a );
				this->k = this->c - ( this->b * this->b )/( 4 * this->a );
			}
			
			//	get parabolic value
			double f( double x ) const
			{ return ( this->a * x + this->b )* x + this->c; }
		
		//---------------------------------------------------------------------
		//	public operator overloads
		//---------------------------------------------------------------------
		public:
			
		//---------------------------------------------------------------------
		//	protected member functions
		//---------------------------------------------------------------------
		protected:	

	};
};

#endif
//---------------------------------------------------------------------
//
//	EOF
//
//---------------------------------------------------------------------

